// Generated by CoffeeScript 1.7.1
var ASSET_LIST, LISTING_RE, LISTING_RE2, LISTING_RE3, l, matchLines, numeral, splitAndStrip;

numeral = require('numeral');

l = require('lodash');

splitAndStrip = function(s) {
  var line, lines, _i, _len, _results;
  lines = (function() {
    var _i, _len, _ref, _results;
    _ref = s.trim().replace(/\r\n|\n\r|\n|\r/g, '\n').split(/\n/);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      line = _ref[_i];
      _results.push(line.trim().replace('\xa0', '').replace('\xc2', ''));
    }
    return _results;
  })();
  _results = [];
  for (_i = 0, _len = lines.length; _i < _len; _i++) {
    line = lines[_i];
    if (line != null) {
      _results.push(line);
    }
  }
  return _results;
};

matchLines = function(regex, lines) {
  var bad_lines, line, match, matches, _i, _len;
  matches = [];
  bad_lines = [];
  for (_i = 0, _len = lines.length; _i < _len; _i++) {
    line = lines[_i];
    regex.lastIndex = 0;
    match = line.match(regex);
    if (match != null) {
      matches.push(match.slice(1));
    } else {
      bad_lines.push(line);
    }
  }
  return [matches, bad_lines];
};

ASSET_LIST = /^([\S\x20]*)\t([\d,\.]*)(\t([\S\x20]*))?(\t([\S\x20]*))?(\t(XLarge|Large|Medium|Small|))?(\t(High|Medium|Low|Rigs|[\d\x20]*))?(\t([\d\x20,\.]*)\x20m3)?(\t([\d]+|))?(\t([\d]+|))?$/;

module.exports.asset = function(lines) {
  var bad_lines, category, group, matches, meta_level, name, quantity, result, size, slot, tech_level, volume, _, _ref;
  _ref = matchLines(ASSET_LIST, lines), matches = _ref[0], bad_lines = _ref[1];
  result = (function() {
    var _i, _len, _ref1, _results;
    _results = [];
    for (_i = 0, _len = matches.length; _i < _len; _i++) {
      _ref1 = matches[_i], name = _ref1[0], quantity = _ref1[1], _ = _ref1[2], group = _ref1[3], _ = _ref1[4], category = _ref1[5], _ = _ref1[6], size = _ref1[7], _ = _ref1[8], slot = _ref1[9], _ = _ref1[10], volume = _ref1[11], _ = _ref1[12], meta_level = _ref1[13], _ = _ref1[14], tech_level = _ref1[15];
      _results.push({
        name: name,
        quantity: numeral().unformat(quantity) || 1,
        group: group,
        category: category,
        size: size,
        slot: slot,
        volume: numeral().unformat(volume) || 0,
        meta_level: meta_level,
        tech_level: tech_level
      });
    }
    return _results;
  })();
  return [result, bad_lines];
};

LISTING_RE = /^([\d,\.]+?)\x20?x?\x20([\S\x20]+)$/;

LISTING_RE2 = /^([\S\x20]+?)\x20x?\x20?([\d,\.]+)$/;

LISTING_RE3 = /^([\S\x20]+)$/;

module.exports.list = function(lines) {
  var bad_lines, bad_lines2, bad_lines3, matches, matches2, matches3, name, quantity, result, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _ref4;
  _ref = matchLines(LISTING_RE, lines), matches = _ref[0], bad_lines = _ref[1];
  _ref1 = matchLines(LISTING_RE2, bad_lines), matches2 = _ref1[0], bad_lines2 = _ref1[1];
  _ref2 = matchLines(LISTING_RE3, bad_lines2), matches3 = _ref2[0], bad_lines3 = _ref2[1];
  result = [];
  for (_i = 0, _len = matches.length; _i < _len; _i++) {
    _ref3 = matches[_i], quantity = _ref3[0], name = _ref3[1];
    result.push({
      name: name.trim(),
      quantity: numeral().unformat(quantity) || 1
    });
  }
  for (_j = 0, _len1 = matches2.length; _j < _len1; _j++) {
    _ref4 = matches2[_j], name = _ref4[0], quantity = _ref4[1];
    result.push({
      name: name.trim(),
      quantity: numeral().unformat(quantity) || 1
    });
  }
  for (_k = 0, _len2 = matches3.length; _k < _len2; _k++) {
    name = matches3[_k][0];
    result.push({
      name: name.trim(),
      quantity: 1
    });
  }
  return [result, bad_lines3];
};

module.exports.parse = function(raw) {
  var good, lines, parser, parsers, result;
  lines = splitAndStrip(raw);
  parsers = [module.exports.asset, module.exports.list];
  result = (function() {
    var _ref, _results;
    _results = [];
    while ((parser = parsers.shift()) && lines) {
      _ref = parser(lines), good = _ref[0], lines = _ref[1];
      _results.push(good);
    }
    return _results;
  })();
  return [l.flatten(result), lines];
};
